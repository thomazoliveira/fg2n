/* 
Implementng Factor Groups with Prime Order on Binary Elliptic Curves
Hu, Oliveira, Zhang, Zhao

# Auxiliary functions 
*/

/* half trace */
function ht(a, n)
    acc := 0;
    for i:=0 to Floor((n-1)/2) do
        acc +:= a;
        a := a^4;
    end for;
    return acc;
end function;

/* affine to lambda */
function affLam(u, v)
    l := u + (u^-1)*v;
    return l;
end function;

/* zip function */
function zip(zet)
    S := ElementToSequence(zet);
    
    if (S[1] eq 1) then
        return (zet + F!1);
    else
        return zet;
    end if;
end function;

/* unzip function */
function unzip(zet, t)
    if (Trace(zet) ne t) then
        return (zet + F!1);
    else
        return zet;
    end if;
end function;

/* weierstrass to edwards */
function weierEd(P, d1, d2)
    u := P[1];
    v := P[2];

    x := d1*(u + d1^2 + d1 + d2)*(u + v + (d1^2 + d1)*(d1^2 + d1 + d2))^-1;
    y := d1*(u + d1^2 + d1 + d2)*(v + (d1^2 + d1)*(d1^2 + d1 + d2))^-1;
    return [x, y];
end function;

/* edwards to weierstrass */
function edWeier(P, d1, d2)
    x := P[1];
    y := P[2];

    u := d1*(d1^2 + d1 + d2)*(x+y)*(x*y + d1*(x+y))^-1;
    v := d1*(d1^2 + d1 + d2)*(x*(x*y + d1*(x + y))^-1 + d1 + F!1);
    return [u, v];
end function;

/* point addition edwards */
function addEd(xP, yP, xQ, yQ, d1, d2)
    xR := (d1*(xP+xQ)+d2*(xP+yP)*(xQ+yQ)+(xP+xP^2)*(xQ*(yP+yQ+F!1)+yP*yQ))*
          (d1+(xP+xP^2)*(xQ+yQ))^-1;
    yR := (d1*(yP+yQ)+d2*(xP+yP)*(xQ+yQ)+(yP+yP^2)*(yQ*(xP+xQ+F!1)+xP*xQ))*
          (d1+(yP+yP^2)*(xQ+yQ))^-1;
    return [xR, yR];
end function;

/* mu function for complete edwards, h=4 */
function mu(P, d1, d2) 
    x := P[1];
    y := P[2];

    A := d1*(d1^2+d1+d2)*(x+y);
    B := x*y + d1*(x+y);
    
    return A*B^-1;
end function;

